use std::str::FromStr;
use agl_rs::astsmpl::*;
use std::collections::HashMap;

grammar(symbols: &mut HashMap<String, i32>);

pub Program: Vec<Declaration> = {
    <Declaration*> => <>
}

Declaration: Declaration = {
    <i:Ident> "=" <e:Expr> ";" => { 
        symbols.insert(i.clone(), e);
        Declaration::Assign(<>)
        // set the value of the identifier in the symbol table
    },
    "write8" <Expr> <Expr> ";" => Declaration::Statement(Statement::Write8(<>)), 
}

Expr: i32 = {
    Term,
};

Term: i32 = {
    <l:Term> "+" <r:Factor> => l + r,
    <l:Term> "-" <r:Factor> => l - r,
    Factor,
};

Factor: i32 = {
    <l:Factor> "*" <r:Primary> => l * r,
    <l:Factor> "/" <r:Primary> => l / r,
    Primary,
};

Primary: i32 = {
    Num,
    <i:Ident> => {
        // lookup the value of the identifier in the symbol table
        symbols.get(&i).unwrap().clone()
    },
    "(" <Expr> ")",
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};

Ident: String = {
    //ident starts with an alpha, followed by any number of alphanum and underscore
    <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => String::from_str(s).unwrap()
}

// Number: f64 = {
//     <n:r"[0-9]+(\.[0-9]+)?"> => f64::from_str(n).unwrap()
// }