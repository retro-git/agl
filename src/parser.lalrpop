use std::str::FromStr;
use agl_rs::ast::*;
use std::collections::HashMap;

grammar(symbols: &HashMap<String, i32>);

pub Program: Vec<Declaration> = {
    <Declaration*> => <>
}

Declaration: Declaration = {
    <Ident> "=" <Expr> ";" => { 
        symbols.insert(<>);
        Declaration::Assign(<>)
        // set the value of the identifier in the symbol table
    },
    "write8" <Expr> <Expr> ";" => Declaration::Statement(Statement::Write8(<>)), 
}

Expr: i32 = {
    <l:Expr> "+" <r:Factor> => l + r,
    <l:Expr> "-" <r:Factor> => l - r,
    Factor,
};

Factor: i32 = {
    <l:Factor> "*" <r:Term> => l * r,
    <l:Factor> "/" <r:Term> => l / r,
    Term,
};

Term: i32 = {
    Num,
    // Ident, => look up in symbol table
    "(" <Expr> ")",
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};

Ident: String = {
    //ident starts with an alpha, followed by any number of alphanum and underscore
    <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => String::from_str(s).unwrap()
}

Int: i32 = {
    <n:r"[0-9]+"> => i32::from_str(n).unwrap()
}

// Number: f64 = {
//     <n:r"[0-9]+(\.[0-9]+)?"> => f64::from_str(n).unwrap()
// }

