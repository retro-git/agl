#![feature(const_option, const_option_ext)]

use clap::Parser;
use std::fs;
use agl::compiler;
use rayon::prelude::*;

const VERSION : &'static str = option_env!("CARGO_PKG_VERSION").unwrap();

#[derive(Parser, Debug)]
#[command(name = "agl", version = VERSION, about = "A DSL for writing GameShark codes")]
struct Cli {
    input_files: Vec<String>,

    #[arg(short, long, value_enum)]
    mode: compiler::Mode,

    //Optionally concatenate all input files into a single output file.
    #[arg(short, long, default_value_t = false)]
    concat: bool,

    //Only used if concat is set to true - specifies the output file name.
    #[arg(short, long)]
    output_file: Option<String>,
}

fn main() {
    let cli = Cli::parse();

    if cli.output_file.is_some() && !cli.concat {
        println!("output_file is ignored because concat is not set");
    }

    // Multi-threaded, map each input file to a compiled string and collect into a single string
    let compiled = cli.input_files.par_iter().map(|file| {
        let code = fs::read_to_string(file).unwrap();
        compiler::compile(code, cli.mode).unwrap()
    });

    // if concat and output_file is set, write to output_file
    // if concat is set but output_file is not, append to first input file but with .gs extension
    // if concat is not set, write to input file but with .gs extension
    let output_file = match cli.concat {
        true => cli.output_file.clone().unwrap_or(cli.input_files.first().unwrap().replace(".agl", ".gs")),
        false => cli.input_files.first().unwrap().replace(".agl", ".gs"),
    };

    // If concat is set, join all compiled strings into a single string, then write to output file.
    // Otherwise, write each file individually.
    match cli.concat {
        true => {
            let compiled = compiled.collect::<Vec<String>>().join("\n");
            let comment = format!("// generated by agl v{} from {}", VERSION, cli.input_files.join(", "));
            let output = format!("{}\n{}\n", comment, compiled);
            fs::write(&output_file, output).unwrap();
        }
        false => {
            // Multi-threaded, write each compiled string to a file
            cli.input_files.par_iter().zip(compiled).for_each(|(file, compiled)| {
                let comment = format!("// generated by agl v{} from {}", VERSION, file);
                let output = format!("{}\n{}\n", comment, compiled);
                fs::write(file.replace(".agl", ".gs"), output).unwrap();
            });
        }
    };
}

#[test]
fn test() {
    let code = fs::read_to_string("example/block.agl").unwrap();
    let compiled = compiler::compile(code, compiler::Mode::PSX).unwrap();
    println!("{:?}", compiled);
    assert_eq!(compiled, "D00681c8 0005\n300681c8 0006\nD00681c8 0005\n300681c8 0005");
}